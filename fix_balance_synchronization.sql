-- üî• ARREGLAR SINCRONIZACI√ìN DE BALANCES
-- ‚ö†Ô∏è Problema: profiles.account_balance ‚â† user_stats.current_balance
-- üìä Este script diagnostica y sincroniza ambos valores

-- ========================================
-- 1. DIAGN√ìSTICO COMPLETO
-- ========================================

SELECT 'üîç DIAGN√ìSTICO: Desincronizaci√≥n de balances' as "ESTADO";

-- Ver la desincronizaci√≥n actual
SELECT 
    'üìä COMPARACI√ìN DE BALANCES' as "SECCI√ìN",
    p.username as "üë§ USUARIO",
    p.account_balance as "üí∞ BALANCE_PERFIL",
    us.current_balance as "üìà BALANCE_STATS", 
    CASE 
        WHEN p.account_balance = us.current_balance THEN '‚úÖ SINCRONIZADO'
        WHEN p.account_balance != us.current_balance THEN '‚ùå DESINCRONIZADO'
        WHEN us.current_balance IS NULL THEN '‚ö†Ô∏è SIN STATS'
        ELSE '‚ùì DESCONOCIDO'
    END as "üîÑ ESTADO",
    ABS(COALESCE(p.account_balance, 0) - COALESCE(us.current_balance, 0)) as "üìè DIFERENCIA"
FROM profiles p
LEFT JOIN user_stats us ON p.id = us.user_id
ORDER BY ABS(COALESCE(p.account_balance, 0) - COALESCE(us.current_balance, 0)) DESC;

-- Ver trades para entender el c√°lculo correcto
SELECT 
    'üìà TRADES Y BALANCES REALES' as "SECCI√ìN",
    p.username as "üë§ USUARIO",
    p.account_balance as "üí∞ BALANCE_INICIAL",
    COUNT(t.id) as "üî¢ TOTAL_TRADES",
    COALESCE(SUM(t.pnl_percentage), 0) as "üìä PNL_TOTAL_%",
    -- Balance real calculado: balance_inicial * (1 + pnl_total/100)
    p.account_balance * (1 + COALESCE(SUM(t.pnl_percentage), 0) / 100) as "üíé BALANCE_REAL_CALCULADO",
    us.current_balance as "üìà BALANCE_STATS_ACTUAL"
FROM profiles p
LEFT JOIN trades t ON p.id = t.user_id
LEFT JOIN user_stats us ON p.id = us.user_id
GROUP BY p.id, p.username, p.account_balance, us.current_balance
ORDER BY p.username;

-- ========================================
-- 2. IDENTIFICAR USUARIO ESPEC√çFICO (tu caso)
-- ========================================

SELECT 
    'üéØ AN√ÅLISIS ESPEC√çFICO DE TU USUARIO' as "SECCI√ìN",
    p.username as "üë§ USUARIO",
    p.account_balance as "üí∞ BALANCE_PERFIL",
    us.current_balance as "üìà BALANCE_LEADERBOARD",
    COUNT(t.id) as "üî¢ TRADES",
    COALESCE(SUM(t.pnl_percentage), 0) as "üìä PNL_TOTAL_%",
    p.account_balance * (1 + COALESCE(SUM(t.pnl_percentage), 0) / 100) as "üíé BALANCE_CORRECTO",
    us.updated_at as "üïê √öLTIMA_ACTUALIZACI√ìN"
FROM profiles p
LEFT JOIN trades t ON p.id = t.user_id
LEFT JOIN user_stats us ON p.id = us.user_id
WHERE p.username LIKE '%lopezalegreiker%' OR p.username LIKE '%iker%'
GROUP BY p.id, p.username, p.account_balance, us.current_balance, us.updated_at;

-- ========================================
-- 3. CORRECCI√ìN AUTOM√ÅTICA
-- ========================================

-- Opci√≥n A: Actualizar user_stats.current_balance basado en c√°lculo real
UPDATE user_stats 
SET current_balance = subquery.balance_correcto,
    updated_at = NOW()
FROM (
    SELECT 
        p.id as user_id,
        p.account_balance * (1 + COALESCE(SUM(t.pnl_percentage), 0) / 100) as balance_correcto
    FROM profiles p
    LEFT JOIN trades t ON p.id = t.user_id
    GROUP BY p.id, p.account_balance
) as subquery
WHERE user_stats.user_id = subquery.user_id;

-- Opci√≥n B: Para usuarios sin trades, sincronizar con account_balance
UPDATE user_stats 
SET current_balance = p.account_balance,
    updated_at = NOW()
FROM profiles p
WHERE user_stats.user_id = p.id 
AND NOT EXISTS (SELECT 1 FROM trades WHERE user_id = p.id);

-- ========================================
-- 4. CREAR TRIGGER PARA MANTENER SINCRONIZACI√ìN
-- ========================================

-- Funci√≥n para mantener sincronizados los balances
CREATE OR REPLACE FUNCTION sync_balance_on_profile_update()
RETURNS TRIGGER AS $$
BEGIN
    -- Cuando se actualiza account_balance en profiles,
    -- recalcular current_balance en user_stats
    UPDATE user_stats 
    SET current_balance = NEW.account_balance * (
        1 + COALESCE((
            SELECT SUM(pnl_percentage) / 100 
            FROM trades 
            WHERE user_id = NEW.id
        ), 0)
    ),
    updated_at = NOW()
    WHERE user_id = NEW.id;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Crear trigger en profiles para sincronizar autom√°ticamente
DROP TRIGGER IF EXISTS sync_balance_trigger ON profiles;
CREATE TRIGGER sync_balance_trigger
    AFTER UPDATE OF account_balance ON profiles
    FOR EACH ROW
    WHEN (OLD.account_balance IS DISTINCT FROM NEW.account_balance)
    EXECUTE FUNCTION sync_balance_on_profile_update();

-- ========================================
-- 5. VERIFICACI√ìN FINAL
-- ========================================

SELECT '‚úÖ VERIFICACI√ìN FINAL' as "ESTADO";

-- Ver balances despu√©s de la correcci√≥n
SELECT 
    'üéâ BALANCES SINCRONIZADOS' as "SECCI√ìN",
    p.username as "üë§ USUARIO",
    p.account_balance as "üí∞ BALANCE_PERFIL",
    us.current_balance as "üìà BALANCE_LEADERBOARD",
    CASE 
        WHEN ABS(p.account_balance - us.current_balance) < 0.01 THEN '‚úÖ SINCRONIZADO'
        ELSE '‚ùå A√öN DESINCRONIZADO'
    END as "üîÑ ESTADO",
    us.updated_at as "üïê ACTUALIZADO"
FROM profiles p
JOIN user_stats us ON p.id = us.user_id
ORDER BY p.username;

-- Estad√≠sticas finales
SELECT 
    'üìä ESTAD√çSTICAS FINALES' as "SECCI√ìN",
    COUNT(*) as "üë• USUARIOS_TOTALES",
    COUNT(CASE WHEN ABS(p.account_balance - us.current_balance) < 0.01 THEN 1 END) as "‚úÖ SINCRONIZADOS",
    COUNT(CASE WHEN ABS(p.account_balance - us.current_balance) >= 0.01 THEN 1 END) as "‚ùå DESINCRONIZADOS"
FROM profiles p
JOIN user_stats us ON p.id = us.user_id;

SELECT 'üöÄ SCRIPT COMPLETADO - Balances sincronizados y trigger creado' as "RESULTADO"; 